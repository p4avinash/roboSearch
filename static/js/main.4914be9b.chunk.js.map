{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBar.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","name","width","height","email","CardArray","robo","map","users","i","key","id","Scroll","style","overflowY","border","children","SearchBar","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","filteredRobos","this","filter","toLowerCase","includes","length","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAmBeA,EAjBF,SAAAC,GACX,OACE,yBAAKC,UAAU,uDACb,yBACEC,IAAI,QACJC,IAAG,+BAA0BH,EAAMI,MACnCC,MAAM,MACNC,OAAO,QAET,6BACE,4BAAKN,EAAMI,MACX,2BAAIJ,EAAMO,UCWHC,EArBU,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE1B,OACE,6BACGA,EAAKC,KAAI,SAACC,EAAOC,GAEhB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIL,EAAKG,GAAGE,GACZV,KAAMK,EAAKG,GAAGR,KACdG,MAAOE,EAAKG,GAAGL,aCEZQ,EAdA,SAAAf,GACb,OACE,yBACEgB,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRZ,OAAQ,UAGTN,EAAMmB,WCIEC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKpB,UAAU,OACb,2BACEA,UAAU,0CACVqB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MC+CHI,E,kDAlDb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAjB1C,EAAKC,MAAQ,CACXvB,KAAM,GACNoB,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAvB,GACJ,EAAKiB,SAAS,CAAEnB,KAAME,S,+BASlB,IAAD,OACD0B,EAAgBC,KAAKN,MAAMvB,KAAK8B,QAAO,SAAA9B,GAC3C,OAAOA,EAAKL,KACToC,cACAC,SAAS,EAAKT,MAAMH,YAAYW,kBAGrC,OAA+B,IAA3BF,KAAKN,MAAMvB,KAAKiC,OAEhB,yBAAKzC,UAAU,gDACb,wCAKF,yBAAKA,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWoB,aAAciB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAACiB,EAAD,CAAUlC,KAAM4B,U,GA3CVO,a,YCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,gBCnHJf,a","file":"static/js/main.4914be9b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n      <img\r\n        alt=\"robot\"\r\n        src={`https://robohash.org/${props.name}`}\r\n        width=\"200\"\r\n        height=\"200\"\r\n      ></img>\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport const CardArray = ({ robo }) => {\r\n  //const cardss =\r\n  return (\r\n    <div>\r\n      {robo.map((users, i) => {\r\n        //while using loops always give  a key because if you would ever delete anything it would only delete the component and not have to render the whole page.\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robo[i].id}\r\n            name={robo[i].name}\r\n            email={robo[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\n//<Card id={robo[i].id} name={robo[i].name} email={robo[i].email} />\r\n\r\nexport default CardArray;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"500px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst SearchBar = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"ma3 tc pa2 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robo: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({ robo: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value });\r\n    //console.log(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    const filteredRobos = this.state.robo.filter(robo => {\r\n      return robo.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n\r\n    if (this.state.robo.length === 0) {\r\n      return (\r\n        <div className=\"tc load animated infinite heartBeat delay-0s\">\r\n          <h1>Loading</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1>Robo Search</h1>\r\n          <SearchBar searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robo={filteredRobos} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport default CardList;\n"],"sourceRoot":""}